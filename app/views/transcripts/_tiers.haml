/ tiers need 'in' class so Set Displayed Tracks knows which are visible
/ but lets remove bootsrap collapse and do this another way, cause its really slow on 800 lines!

.tier_container
  - if phrase.original
    .tier{ class: [phrase.phrase_id, 'transcription'] }
      = phrase.original

  - words = phrase.words
  - unless words.empty?
    .tier{ class: ["#{phrase.phrase_id}_w", 'morphemes'] }
      - words.each do |word|
        - morphemes = word.morphemes
        - colspan = morphemes.empty? ? 1 : morphemes.size
        %span
          %table.words
            %tr
              %td.word{:colspan => colspan}
                %span.concordance{'data-type' => 'word', 'data-search' => word[:word], 'data-language-code' => @transcript.language_code, 'data-addr' => "/p#{phrase.transcript.phrases.index(phrase) + 1}/w#{word.position}"}
                  = word[:word]

                - unless morphemes.empty?
                  %tr.morphemes.hide
                    - morphemes.each do |s|
                      %td.morpheme
                        %span.concordance{'data-type' => 'morpheme', 'data-search' => s.morpheme, 'data-language-code' => @transcript.language_code, 'data-addr' => "/p#{phrase.transcript.phrases.index(phrase) + 1}/w#{word.position}/m#{s.position}"}
                          = s.morpheme

                  %tr.morphemes.glosses.hide
                    - morphemes.each do |s|
                      %td.gloss= s.gloss

  - if phrase.graid
    .tier{ class: [phrase.phrase_id, 'graid'] }
      = phrase.graid

  - if phrase.morph
    .tier{ class: [phrase.phrase_id, 'morph'] }
      = phrase.morph

  - if phrase.gloss
    .tier.hide{ class: [phrase.phrase_id, 'gloss'] }
      = phrase.gloss

  - if phrase.translation
    .tier{ class: [phrase.phrase_id, 'translation'] }
      = phrase.translation

  / - if phrase.comment
  /   .tier{ class: [phrase.phrase_id, 'comment'] }
  /     = phrase.comment

  .dz-message.data-dz-message
    %span

.attachment_container

  - if phrase.attachment
    - phrase.attachment = phrase.attachment+'.jpg'
    / set a flag so the js that loads attachment images can add a timestamp to the image file
    / useful if admin is uploading images, saves dumping the cache
    - if current_user and (@transcript.depositor.id == current_user.id or current_user.admin?)
      - cachebust = "true"

    - img_url = "/#{TranscriptPhrase.public_dir}/#{@transcript.id}/#{phrase.phrase_id}/#{phrase.attachment}"

    .phrase_attachment.attachment_toggle_target{ :class => [phrase.phrase_id, 'attachment'],
                        data: { 'start'        => "#{phrase.start_time}",
                                'end'          => "#{phrase.end_time}",
                                'transcriptid' => "#{@transcript.id}",
                                'phraseid'     => "#{phrase.phrase_id}",
                                'imagepath'    => TranscriptPhrase.public_dir,
                                'filename'     => "#{phrase.attachment}",
                                'cachebust'   => "#{cachebust}",
                                 }}

      = link_to '#', :data => { :toggle => 'modal', :target => '#myModal', :imgurl => img_url }, :class => "attachment_thumb_preview" do
        / = image_tag img_url, alt: phrase.attachment
        .image{ style: "background-image: url(#{img_url});"}

      = hidden_field_tag :transcript_id, @transcript.id
      = hidden_field_tag :phrase_id, phrase.phrase_id
      = hidden_field_tag :attachment_name, phrase.attachment

